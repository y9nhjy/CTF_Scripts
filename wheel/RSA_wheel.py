import gmpy2
from Crypto.Util.number import *


# m:明文 c:密文 e:公钥(一般为65537) d:私钥 p,q:两个大素数 n:p*q phi(n):(p-1)*(q-1)
# dp=d%(p-1) dq=d%(q-1)
# e*d≡1 mod phi(n)  c=m**e mod n(加密)  m=c**d mod n(解密)
# 因式分解工具:SageMath、Yafu 在线查询网站:http://factordb.com/
e = 65537
c = 87677652386897749300638591365341016390128692783949277305987828177045932576708
p = 275127860351348928173285174381581152299
q = 319576316814478949870590164193048041239
n = p * q
phi = (p - 1) * (q - 1)
d = gmpy2.invert(e, phi)
m = gmpy2.powmod(c, d, n)
print(long_to_bytes(m))

# enc文件
# import rsa
# key = rsa.PrivateKey(n, e, d, q, p)
# with open(r"C:\Users\11148\Desktop\flag.enc", "rb") as f:
#     # f = f.read()
#     # print(rsa.decrypt(f, key))  # f:公钥加密结果  key:私钥
#     print(rsa.decrypt(f.read(), key).decode())


# dp泄露
# e = 65537
# dp = 5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329
# n = 50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477
# c = 39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619
#
# for i in range(1, e):
#     if (dp * e - 1) % i == 0:
#         if (n % ((dp * e - 1) // i + 1)) == 0:
#             p = (dp * e - 1) // i + 1
#             q = n // p
#             phi_n = (p - 1) * (q - 1)
#             d = gmpy2.invert(e, phi_n)
#             m = pow(c, d, n)
# print(long_to_bytes(m))


# dp,dq泄露
# from gmpy2 import *
#
# p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229
# q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469
# dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929
# dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041
# c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852
#
# # dp+dq+p+q+c => m
# def rsa(dp, dq, p, q, c):
#     m1 = pow(c, dp, p)
#     m2 = pow(c, dq, q)
#     p_q = invert(p, q)
#     m = m1 + p_q * ((m2 - m1) % q) * p
#     print(long_to_bytes(m))
#
# rsa(dp, dq, p, q, c)


# 共模攻击
# e1 = 2**3 * 11 * 89 * 123217
# e2 = 65537
# n = 7265521127830448713067411832186939510560957540642195787738901620268897564963900603849624938868472135068795683478994264434459545615489055678687748127470957
# c1 = 3315026215410356401822612597933850774333471554653501609476726308255829187036771889305156951657972976515685121382853979526632479380900600042319433533497363
# c2 = 1188105647021006315444157379624581671965264301631019818847700108837497109352704297426176854648450245702004723738154094931880004264638539450721642553435120
# 共模攻击函数
# def rsa_gong_N_def(e1,e2,c1,c2,n):
#     e1, e2, c1, c2, n=int(e1),int(e2),int(c1),int(c2),int(n)
#     # print("e1,e2:",e1,e2)
#     # print(gmpy2.gcd(e1,e2))
#     s = gmpy2.gcdext(e1, e2)
#     # print(s)
#     s1 = s[1]
#     s2 = s[2]
#     if s1 < 0:
#         s1 = - s1
#         c1 = gmpy2.invert(c1, n)
#     elif s2 < 0:
#         s2 = - s2
#         c2 = gmpy2.invert(c2, n)
#     m = (pow(c1,s1,n) * pow(c2 ,s2 ,n)) % n
#     return int(m)
#
# m = rsa_gong_N_def(e1,e2,c1,c2,n)
# # print(m)
# print(long_to_bytes(m))


# 共享素数
# e = 65537
# n1 = 23686563925537577753047229040754282953352221724154495390687358877775380147605152455537988563490716943872517593212858326146811511103311865753018329109314623702207073882884251372553225986112006827111351501044972239272200616871716325265416115038890805114829315111950319183189591283821793237999044427887934536835813526748759612963103377803089900662509399569819785571492828112437312659229879806168758843603248823629821851053775458651933952183988482163950039248487270453888288427540305542824179951734412044985364866532124803746008139763081886781361488304666575456680411806505094963425401175510416864929601220556158569443747
# n2 =22257605320525584078180889073523223973924192984353847137164605186956629675938929585386392327672065524338176402496414014083816446508860530887742583338880317478862512306633061601510404960095143941320847160562050524072860211772522478494742213643890027443992183362678970426046765630946644339093149139143388752794932806956589884503569175226850419271095336798456238899009883100793515744579945854481430194879360765346236418019384644095257242811629393164402498261066077339304875212250897918420427814000142751282805980632089867108525335488018940091698609890995252413007073725850396076272027183422297684667565712022199054289711
# c1 =1627484142237897613944607828268981193911417408064824540711945192035649088104133038147400224070588410335190662682231189997580084680424209495303078061205122848904648319219646588720994019249279863462981015329483724747823991513714172478886306703290044871781158393304147301058706003793357846922086994952763485999282741595204008663847963539422096343391464527068599046946279309037212859931303335507455146001390326550668531665493245293839009832468668390820282664984066399051403227990068032226382222173478078505888238749583237980643698405005689247922901342204142833875409505180847943212126302482358445768662608278731750064815
# c2 =2742600695441836559469553702831098375948641915409106976157840377978123912007398753623461112659796209918866985480471911393362797753624479537646802510420415039461832118018849030580675249817576926858363541683135777239322002741820145944286109172066259843766755795255913189902403644721138554935991439893850589677849639263080528599197595705927535430942463184891689410078059090474682694886420022230657661157993875931600932763824618773420077273617106297660195179922018875399174346863404710420166497017196424586116535915712965147141775026549870636328195690774259990189286665844641289108474834973710730426105047318959307995062
# p = gmpy2.gcd(n1,n2)
# q1 = n1//p
# q2 = n2//p


# 小明文
# e = 3
# n = 18970053728616609366458286067731288749022264959158403758357985915393383117963693827568809925770679353765624810804904382278845526498981422346319417938434861558291366738542079165169736232558687821709937346503480756281489775859439254614472425017554051177725143068122185961552670646275229009531528678548251873421076691650827507829859299300272683223959267661288601619845954466365134077547699819734465321345758416957265682175864227273506250707311775797983409090702086309946790711995796789417222274776215167450093735639202974148778183667502150202265175471213833685988445568819612085268917780718945472573765365588163945754761
# c = 150409620528139732054476072280993764527079006992643377862720337847060335153837950368208902491767027770946661
# m = gmpy2.iroot(c, e)[0]
# print(long_to_bytes(m))


# 低指数攻击
# def t_cf(n, d):  # 这里把分数n/d转化成连分数形式
#     res = []
#     while d:
#         res.append(n // d)
#         n, d = d, n % d
#     return res
# def cf(sub_res):  # 得到渐近分数的分子和分母
#     n, d = 1, 0
#     for i in sub_res[::-1]:
#         d, n = n, i * n + d
#     return d, n
# def list_fraction(x, y):  # 列出每一个渐近分数 例如[2,7]即7/2是89/26的一级渐近分数
#     res = t_cf(x, y)
#     res = list(map(cf, (res[0:i] for i in range(1, len(res)))))
#     return res
# def get_pq(a, b, c):  # 用求根公式求出p,q
#     par = gmpy2.isqrt(b * b - 4 * a * c)
#     x1, x2 = (-b + par) // (2 * a), (-b - par) // (2 * a)
#     return x1, x2
# def wienerAttack(e, n):
#     for (d, k) in list_fraction(e, n):
#         if k == 0:
#             continue
#         if (e * d - 1) % k != 0:
#             continue
#         phi = (e * d - 1) // k
#         px, qy = get_pq(1, phi - n - 1, n)  # n = pq,phi-n+1 == -(p+q)
#         if px * qy == n:
#             p, q = abs(int(px)), abs(int(qy))
#             d = gmpy2.invert(e, (p - 1) * (q - 1))
#             return d
#     print("求解d失败")
#
# n = 468459887279781789188886188573017406548524570309663876064881031936564733341508945283407498306248145591559137207097347130203582813352382018491852922849186827279111555223982032271701972642438224730082216672110316142528108239708171781850491578433309964093293907697072741538649347894863899103340030347858867705231
# e = 284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345
# c = 350429162418561525458539070186062788413426454598897326594935655762503536409897624028778814302849485850451243934994919418665502401195173255808119461832488053305530748068788500746791135053620550583421369214031040191188956888321397450005528879987036183922578645840167009612661903399312419253694928377398939392827
# d = wienerAttack(e, n)
# m = pow(c, d, n)
# print(long_to_bytes(m))
